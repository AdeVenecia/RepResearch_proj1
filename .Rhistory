pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2 <- collorRampPalette(c("red","yellow"))
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
p3(5)
plot(x,y, pch = 19, col = rgb(0,.5,.5))
plot(x,y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = pal1(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"))
qplot(y=hwy, data=mpg, col=drv)
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data = mpg, geom="boxplot")
qplot(drv, hwy, data = mpg, geom="boxplot", color = manufacturer)
qplot(hwy, data=mpg, set=draw_key_vline())
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data = mpg, facets = .~drv )
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2 )
qplot(displ, hwy, data=mpg, gemo=c("point","smooth"), facets = .~drv)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
(g+geom_point())+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(set="lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes=(color=drv))
g+geom_point(size = 4, alpha = 1/2, aes=)
g+geom_point(size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color = drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_pint(aes(color=drv))+theme_bw(base_family="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(c(-3,3)))
g+geom_line()+coord_cartesian(ylim(c(-3,3))
)
g+geom_line()+coord_cartesian(ylim=(c(-3,3))
g+geom_line()+coord_cartesian(ylim=(c(-3,3)))
g+geom_line()+coord_cartesian(ylim=(c(-3,3)))
g+geom_line()+coord_cartesian(ylim=(c(-3,3)))
g+geom_line()+coord_cartesian(ylim=(c(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=dsipl,y=hwy,color=factor(year)))
g <- ggplot(mpg, aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage", title="Swirl Rules!")
str(diamons)
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds,binwidth(18497/30))
qplot(price, data=diamonds,binwidth=(18497/30))
qplot(price, data=diamonds,binwidth=18497/30)
brk
couns
counts
qplot(price, data=diamonds,binwidth=18497/30, fill = cut)
qplot(price, data = diamonds, geom="density")
qplot(price, data = diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape = cut)
qplot(carat, price, data=diamonds, color = cut)
qplot(carat, price, data=diamonds, color = cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color = cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color = cut, facet = .~cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color = cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point()
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$cut, seq(0,1, length=4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm",size=3, color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
dist(dataFrame)
hclust(distxy)
hc <- hclust(d=distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
9
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
exit()
q
q()
library(swirl)
swirl()
swirl()
swirl()
install.packages("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
rm(list = ls())
swirl()
swirl()
swirl()
swirl()
remove.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
rm(list = ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(dist())
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
library(shiny)
server <- function(input, output, session) {
# this will work, the reactive element is wrapped in an observer
# it prints the value to the to the results text box
observe({
updateTextInput(session, inputId = "myresults", value = input$mytext)
})
}
ui <-   basicPage(
h3("The value in the text box gets printed to the results text box."),
textInput("mytext", "Input goes here"),
textInput("myresults", "Results will be printed here", "Initial value")
)
shinyApp(ui = ui, server = server)
library(Rfacebook)
# Text Mining
library(tm)
library(RCurl)
library(wordcloud)
# Get authentication information
# https://developers.facebook.com/apps
# 'Dashboard' for information
appid <- "1750068631951767"
appSecret <- "f7534518ab9b22b3935889e4ccfd926f"
appToken <- "1750068631951767|AUqydmUxEbwSuFgdXENMnIoMlHw"
getPage("nike", token = appToken, n=10)
page <- 1
nike_post <- getPost(post=nike_page$id[page], n=as.numeric(nike_post$comments_count[page]), token=appToken)
nike_page <- getPage(page="nike", token=appToken)
page <- 1
nike_post <- getPost(post=nike_page$id[page], n=as.numeric(nike_post$comments_count[page]), token=appToken)
nike_post <- getPost(post=nike_page$id[page], n=as.numeric(nike_page$comments_count[page]), token=appToken)
nike_post
nike_post <- getPost(post=nike_page$id[page], n=10, token=appToken)
nike_post
insights <- getInsights(object_id="nike", token=appToken, metric='page_impressions')
getPage("cirrolytix", token = appToken, n=1)
insights <- getInsights(object_id="cirrolytix", token=appToken, metric='page_impressions')
uToken <- "EAAY3rZAsj2ZAcBAMxQKT6aF3zrriBqkNCVUJwK9g96ZAto9uHsvsxIVCw1hfZB6pMpGOsmK8ZCLDXxstuYXdWcHjNwb1ZBTBKPKM0wLLxLfZBqp5l8M6ZATIpyBDGV9yerEJ3VjZApg1XEdrjus0RaZAa1LKjfKm9PQ9wjXvthyrojUn0drvccIwyGn0fcPIFjM34ZD"
getPage("cirrolytix", token = uToken, n=1)
insights <- getInsights(object_id="cirrolytix", token=uToken, metric='page_impressions')
fboauth <- fbOAuth(appid, appSecret, extended_permissions = TRUE)
getLikes(user="cirrolytix", token=uToken)
getLikes(user="cirrolytix", token=appToken)
getLikes("cirrolytix", token=appToken)
getLikes("cirrolytix", token=fboauth)
getPage("cirrolytix", token = uToken, n=1)
getLikes("cirrolytix", token=fboaut)
getPage("nike", token = uToken, n=1)
getLikes(user=914100268726157, token=fboaut)
getLikes(user=914100268726157, token=uToken)
getLikes(user=914100268726157, token=appToken)
getLikes(user="914100268726157", token=appToken)
getLikes(user="914100268726157", token=uToken)
getLikes(user="914100268726157", token=fboauth)
fbOAuth <- function(app_id, app_secret, extended_permissions=FALSE, legacy_permissions=FALSE, scope=NULL)
{
## getting callback URL
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
message <- paste("Copy and paste into Site URL on Facebook App Settings:",
full_url, "\nWhen done, press any key to continue...")
## prompting user to introduce callback URL in app page
invisible(readline(message))
## a simplified version of the example in httr package
facebook <- oauth_endpoint(
authorize = "https://www.facebook.com/dialog/oauth",
access = "https://graph.facebook.com/oauth/access_token")
myapp <- oauth_app("facebook", app_id, app_secret)
if (is.null(scope)) {
if (extended_permissions==TRUE){
scope <- c("user_birthday", "user_hometown", "user_location", "user_relationships",
"publish_actions","user_status","user_likes")
}
else { scope <- c("public_profile", "user_friends")}
if (legacy_permissions==TRUE) {
scope <- c(scope, "read_stream")
}
}
if (packageVersion('httr') < "1.2"){
stop("Rfacebook requires httr version 1.2.0 or greater")
}
## with early httr versions
if (packageVersion('httr') <= "0.2"){
facebook_token <- oauth2.0_token(facebook, myapp,
scope=scope)
fb_oauth <- sign_oauth2.0(facebook_token$access_token)
if (GET("https://graph.facebook.com/me", config=fb_oauth)$status==200){
message("Authentication successful.")
}
}
## less early httr versions
if (packageVersion('httr') > "0.2" & packageVersion('httr') <= "0.6.1"){
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## httr version from 0.6 to 1.1
if (packageVersion('httr') > "0.6.1" & packageVersion('httr') < "1.2"){
Sys.setenv("HTTR_SERVER_PORT" = "1410/")
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## httr version after 1.2
if (packageVersion('httr') >= "1.2"){
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## identifying API version of token
error <- tryCatch(callAPI('https://graph.facebook.com/pablobarbera', fb_oauth),
error = function(e) e)
if (inherits(error, 'error')){
class(fb_oauth)[4] <- 'v2'
}
if (!inherits(error, 'error')){
class(fb_oauth)[4] <- 'v1'
}
return(fb_oauth)
}
install.packages("UsingR")
setwd("C:/Users/acdev/Dropbox/Coursera/Data Science Specialization/Assignments/Course 5 Reproducible Research/Project 1/Git Repo/RepData_PeerAssessment1")
unzip(zipfile="activity.zip")
setwd("C:/Users/acdev/Dropbox/Coursera/Data Science Specialization/Assignments/Course 5 Reproducible Research/Project 1/Git")
setwd("C:/Users/acdev/Dropbox/Coursera/Data Science Specialization/Assignments/Course 5 Reproducible Research/Project 1/Git/RepData_PeerAssessment1")
unzip("activity.zip")
activity$day
data <- read.csv("activiy.csv")
data <- read.csv("activity.csv")
data$day
str(data)
summary(data)
head(data)
View(data)
View(data)
stepsperday <- with(data(tapply(data$steps, data$date, FUN = sum)))
?tapply
stepsperday <- with(data, tapply(steps, date, sum, na.rm=T)))
stepsperday <- with(data, tapply(steps, date, sum, na.rm=T))
stepsperday
sperd <- data.frame(date = names(stepsperday), steps = stepsperday, row.names=NULL)
sperd
hist(sperd$steps, breaks=5)
library(dplyr)
?summarise
?filter
spd <- filter(data, data$steps > 0)
spd
?summarise
spd2 <- summarise(spd, group_by(steps, date), sum(steps))
spd2 <- summarise(group_by(spd, date), totalsteps = sum(steps))
spd2
hist(spd2$steps, breaks=5)
hist(spd2$totalsteps, breaks=5)
hist(spd2$totalsteps, breaks=5)
mean(spd2($steps))
mean(spd2$steps))
mean(spd2$steps)
mean(spd2$totalsteps)
spd
spd3 <- summarise(group_by(spd, interval), avesteps = sum(steps)
)
spd3
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps))
dailyp <- ggplot2(spd3, aes(x=interval, y=avesteps))
library(ggplot2)
dailyp <- ggplot2(spd3, aes(x=interval, y=avesteps))
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps))
dailyp+geom_line()
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps, fill=avesteps))
dailyp+geom_line()
dailyp+geom_line()+col="blue"
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps, col="blue"))
dailyp+geom_line()
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps), col="blue")
dailyp+geom_line()
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps, col="green"))
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps, fill="green"))
dailyp+geom_line()
dailyp <- ggplot(spd3, aes(x=interval, y=avesteps, col="green"))
dailyp+geom_line()
dailyp+geom_line(color="blue")
dailyp+geom_line(color="blue")+xlab = "Interval"+ylab="Average Steps"+main="Average Number of Steps per Interval"
dailyp+geom_line(color="blue")+xlab("Interval")+ylab("Average Steps")+main("Average Number of Steps per Interval")
dailyp+geom_line(color="blue")+xlab("Interval")+ylab("Average Steps")+ggtitle("Average Number of Steps per Interval")
spd
spd3
View(spd3)
?max
max(spd3$avesteps)
cleanData <- filter(data, data$steps > 0)
spI <- summarise(group_by(cleanData, interval, date), aveSteps = sum(steps))
spI
maxSteps <- max(spI$aveSteps)
maxSteps
cleanData <- filter(data, data$steps > 0)
spI <- summarise(group_by(cleanData, interval), aveSteps = sum(steps))
max(spI$aveSteps)
cleanData <- filter(data, data$steps > 0)
cleanData
clean <- data[is.na(data$steps),1]
clean
library(plyr)
library(dplyr)
intervalTable <- ddply(clean, .(interval), summarize, Avg = mean(steps))
cleanData <- filter(data, data$steps > 0)
spI <- summarise(group_by(cleanData, interval), aveSteps = mean(steps))
spI
cleanData <- filter(data, data$steps > 0)
cleanData
spI <- summarise(group_by(cleanData, interval), aveSteps = mean(steps))
spI
spI <- with(cleanData, tapply(group_by(interva, date), steps, ave)
)
spI <- summarise(group_by(cleanData, date), aveSteps = mean(steps), interval)
spI <- summarise(group_by(data, interval), aveSteps = mean(steps))
spI
d <- group_by(cleanData, interval)
d
d <- group_by(cleanData, date)
d
d <- group_by(cleanData, interval)
d
d <- arrange(d, desc(interval))
d
d <- arrange(d, asc(interval))
d
d <- arrange(d, interval)
d
a <- with(d, tapply(steps, interval, sum))
a
d
c <- data.frame(interval = names(a), steps = a, row.names=NULL)
c
a <- with(d, tapply(steps, interval, mean))
c <- data.frame(interval = names(a), steps = a, row.names=NULL)
c
dailyp <- ggplot(c, aes(x=interval, y=steps))
dailyp+geom_line()
c
c
dailyp <- ggplot(c, aes(x=interval, y=steps))
dailyp+geom_line()
a
c
d
dailp <- ggpot(d, aes(x=interval, y=stepsperday))
dailp <- ggplot(d, aes(x=interval, y=stepsperday))
dailp+geom_line()
intervalTable <- ddply(clean, .(interval), summarize, Avg = mean(steps))
clean <- data[!is.na(data$steps),]
clean
intervalTable <- ddply(clean, .(interval), summarize, Avg = mean(steps))
intervalTable
s
d
c
?ddply
clean
clean <- data[!is.na(data$steps),]
cleanData <- filter(data, !is.na(data$steps)
)
cleanData
spI <- summarise(group_by(cleanData, interval), aveSteps = mean(steps))
c <- with(cleanData, tapply(steps, interval, mean))
c <- data.frame(interval = names(c), steps = c, row.names=NULL)
c
intervalTable
dialp <- ggplot(c, aes(x=interval, y=stepsperday))
dialp+geom_line()
dialp <- ggplot(c, aes(x=interval, y=step))
dialp <- ggplot(c, aes(x=interval, y=steps))
dialp+geom_line()
p <- ggplot(intervalTable, aes(x=interval, y=Avg), xlab = "Interval", ylab="Average Number of Steps")
p + geom_line()+xlab("Interval")+ylab("Average Number of Steps")+ggtitle("Average Number of Steps per Interval")
c
intervalTable
dialp <- ggplot(c, aes(x=interval, y=steps), xlab="x", ylab="y")
dialp+geom_line()
dialp+geom_line()+xlab("x")+ylabe("y")
dialp+geom_line()+xlab("x")+ylab("y")
str(intervalTable)
str(c)
cleanData
a <- summarise(group_by(cleanData, interval), steps = mean(stepsperday))
a <- summarise(group_by(cleanData, interval), steps = mean(steps))
a
a <- summarise(group_by(cleanData, date), steps = mean(steps))
a
a <- summarise(cleanData$interval, steps = mean(steps))
?summarise
cleanData
a <- group_by(cleanData, interval)
a
?ddply
?group_by
a <- summarise(group_by(cleanData, interval, date), steps = mean(steps))
a <- summarise(group_by(cleanData, date, interval), steps = mean(steps))
a <- summarise(group_by(cleanData, date), steps = mean(steps))
a <- summarise(group_by(cleanData$interval, cleanData$date), steps = mean(steps))
a <- summarise(group_by(cleanData, interval), mean(cleanData$steps))
a
a <- summarise(group_by(cleanData, date), mean(cleanData$steps))
a
invTable <- ddply(cleanData, .(interval), summarize, Avg = mean(steps))
invTable
str(invTable)
str(c)
c <- data.frame(lapply(c.interval, as.integer))
c <- data.frame(lapply(c$interval, as.integer))
str(c)
c
spI <- summarise(group_by(cleanData, inerval), mean(steps))
spI <- summarise(group_by(cleanData, interval), mean(steps))
spI
head(cleanData)
byint <- group_by(cleanData, interval)
byint
View(byint)
View(byint)
d <- summarise(byint, mean(steps))
d
byint <- group_by(cleanData, interval, date)
byint
d <- summarise(byint, mean(steps))
d
rm(list = ls())
detach("plyr")
library("plyr", lib.loc="~/R/win-library/3.4")
detach("plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:ggplot2")
detach("package:plyr")
